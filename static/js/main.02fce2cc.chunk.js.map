{"version":3,"sources":["components/Navbar/index.js","components/Employee-Card/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","EmployeeCard","props","src","image","alt","name","firstName","lastName","email","phone","address","number","city","state","country","age","Jumbotron","employee","original","handleClickABC","event","preventDefault","console","log","sortedState","sort","a","b","first","setState","handleClickZYX","fetch","then","res","json","result","results","onClick","this","id","length","map","key","login","uuid","last","location","street","picture","large","dob","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02fce2cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <nav className=\"navbar navbar-light\">\r\n      <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./employeeCard.css\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div className=\"col-sm-3\">\r\n      <div className=\"card\">\r\n        <img src={props.image} className=\"card-img-top\" alt={props.name} />\r\n        <div className=\"card-body\">\r\n          <ul>\r\n            <li>\r\n              <p>\r\n                {\" \"}\r\n                Name: {props.firstName} {props.lastName}\r\n              </p>\r\n            </li>\r\n            <li>\r\n              <p> Email: {props.email}</p>\r\n            </li>\r\n            <li>\r\n              <p> Phone Number: {props.phone}</p>\r\n            </li>\r\n            <li>\r\n              <p>\r\n                {\" \"}\r\n                Address: {props.address.number} {props.address.name},{\" \"}\r\n                {props.city}, {props.state} {props.country}\r\n              </p>\r\n            </li>\r\n            <li>\r\n              <p>Age: {props.age}</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./Jumbotron.css\";\r\nimport EmployeeCard from \"../Employee-Card/index\";\r\n\r\nclass Jumbotron extends Component {\r\n  state = {\r\n    employee: [],\r\n    original: [],\r\n  };\r\n\r\n  // renderCard(emp) {\r\n  //   return (\r\n  //     <EmployeeCard\r\n  //       firstName={emp[0].name.first}\r\n  //       lastName={emp[0].name.last}\r\n  //       email={emp[0].email}\r\n  //       phone={emp[0].phone}\r\n  //       address={emp[0].location.street}\r\n  //       image={emp[0].picture.medium}\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://randomuser.me/api/?results=20&nat=us\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          employee: result.results,\r\n        });\r\n        console.log(this.state.employee);\r\n      });\r\n  }\r\n\r\n  handleClickABC = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Sort Alphabetically A-Z\");\r\n    console.log(this.state.employee);\r\n    const sortedState = this.state.employee.sort((a, b) =>\r\n      a.name.first > b.name.first ? 1 : -1\r\n    );\r\n    console.log(sortedState);\r\n    this.setState({\r\n      employee: sortedState,\r\n    });\r\n  };\r\n\r\n  handleClickZYX = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Sort Alphabetically Z-A\");\r\n    console.log(this.state.employee);\r\n    const sortedState = this.state.employee.sort((a, b) =>\r\n      a.name.first > b.name.first ? -1 : 1\r\n    );\r\n    console.log(sortedState);\r\n    this.setState({\r\n      employee: sortedState,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">Employee Info</h1>\r\n          <button onClick={this.handleClickABC} id=\"sortABC\">\r\n            Sort A-Z\r\n          </button>\r\n          <button onClick={this.handleClickZYX} id=\"sortZYX\">\r\n            Sort Z-A\r\n          </button>\r\n\r\n          <div className=\"row\">\r\n            {this.state.employee.length === 0 ? (\r\n              <p></p>\r\n            ) : (\r\n              this.state.employee.map((employee) => (\r\n                <EmployeeCard\r\n                  key={employee.login.uuid}\r\n                  firstName={employee.name.first}\r\n                  lastName={employee.name.last}\r\n                  email={employee.email}\r\n                  phone={employee.phone}\r\n                  address={employee.location.street}\r\n                  image={employee.picture.large}\r\n                  city={employee.location.city}\r\n                  country={employee.location.country}\r\n                  state={employee.location.state}\r\n                  age={employee.dob.age}\r\n                />\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Jumbotron />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}